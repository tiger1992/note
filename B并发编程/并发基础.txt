
====== 线程认识 ======

1、进程(Process)：是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。

1、线程的引入：60年代，在OS中能拥有资源和独立运行的基本单位是进程，然而随着计算机技术的发展，进程出现了很多弊端，一是由于进程是资源拥有者，创建、撤消与切换存在较大的时空开销，因此需要引入轻型进程；二是由于对称多处理机（SMP）出现，可以满足多个运行单位，而多个进程并行开销过大。因此在80年代，出现了能独立运行的基本单位——线程（Threads）。

2、线程(thread)：操作系统运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。

3、某一个作业因为等待磁盘或者其他 I/O 操作而暂停时，那 CPU 就只能阻塞直到该 I/O 完成，对于 CPU 操作密集型的程序，I/O 操作相对较少，因此浪费的时间也很少。但是对于 I/O 操作较多的场景来说，CPU 的资源是属于严重浪费的。


====== 线程的状态 ======

1、NEW(新建)：A thread that has not yet started is in this state.
  初始状态，线程被构建，但是还没有调用 start 方法

2、RUNNABLE(运行)：A thread executing in the Java virtual machine is in this state.
  运行状态，JAVA 线程把操作系统中的就绪和运行两种状态统一称为“运行中”

3、BLOCKED(阻塞)：A thread that is blocked waiting for a monitor lock is in this state.
  阻塞状态，表示线程进入等待状态,也就是线程因为某种原因放弃了 CPU 使用权，阻塞也分为几种情况

4、WAITING(等待)：A thread that is waiting indefinitely for another thread to perform a particular action is in this state.

5、TIMED_WAITING(带超时时间的等待)：A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.

6、TERMINATED(终止)：A thread that has exited is in this state.


====== 线程复位 ======
1、为什么要复位：Thread.interrupted()是属于当前线程的，是当前线程对外界中断信号的一个响应，表示自己已经得到了中断信号，但不会立刻中断自己，具体什么时候中断由自己决定，让外界知道在自身中断前，他的中断状态仍然是 false，这就是复位的原因。

2、 * 1. Thread.interrupted()
    * 2. InterruptedException


====== 线程安全 ======
1、概念：在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况。
  1)、本质是管理对数据状态的访问。
  2)、数据是共享的，在线程生命周期里是变化的。


====== 锁的状态 ======

假如有两个线程 ThreadA 和 ThreadB
1、只有线程 ThreadA 去访问（如果这种情况属于大部分情况时）--》偏向锁
2、ThreadA 和 ThreadB 交替访问 --》轻量级锁 --》自旋 ，轻量级锁适用于那些同步代码块执行的很快的场景
3、多个线程同时访问 --》 阻塞

1、无锁、{偏向锁、轻量级锁}、重量级锁(真正意义加锁)

2、锁的状态根据竞争激烈的程度从低到高不断升级

3、在我们的应用开发中，绝大部分情况下一定会存在 2 个以上的线程竞争，那么如果开启偏向锁，反而会提升获取锁的资源消耗。所以可以通过 jvm 参数UseBiasedLocking 来设置开启或关闭偏向锁

4、自旋必须要有一定的条件控制，否则如果一个线程执行同步代码块的时间很长，那么这个线程不断的循环反而会消耗 CPU 资源。默认情况下自旋的次数是 10 次，可以通过 preBlockSpin 来修改

5、当轻量级锁膨胀到重量级锁之后，意味着线程只能被挂起阻塞来等待被唤醒了。

6、锁成立的条件：共享、互斥

7、锁在内存中的布局：对象头(MarkWord)、实例数据、填充数据


volatile 解决可见性问题(禁止指令重排序来达到可见性效果)，不能解决原子性问题。

synchronized 可以解决【原子性、有序性、可见性问题、[对象逃逸]】，也就是解决了线程安全问题




====== 服务端的步骤 ======

1、在pom中引入依赖：
  【<dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
    </dependency>
   】
   
2、在启动类上注解：【@EnableEurekaServer】

3、在配置文件中配置一些信息：
  【#端口
    server.port=8900
    #服务主机地址
    eureka.instance.hostname=127.0.0.1
    eureka.client.register-with-eureka=false
    eureka.client.fetch-registry=false
    #服务默认访问地址
    eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/
  】
  
====== 客户端的步骤 ======

1、在pom中引入依赖：
  【<dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!--消息总线-->
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-bus-amqp</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-config</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    </dependency>
   】
   
2、在启动类上注解：【@EnableEurekaServer】

3、在配置文件中配置一些信息：
  【#端口
    server.port=8900
    #服务主机地址
    eureka.instance.hostname=127.0.0.1
    eureka.client.register-with-eureka=false
    eureka.client.fetch-registry=false
    #服务默认访问地址
    eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/
  】
  
  
====== 负载均衡 ======
1、基于服务端：
  1)、需要独立运行负载均衡服务器
  2)、请求 --> 负载均衡服务器(Nginx) --> 具体服务
  3)、发出请求后才拿到真实的请求地址
  
2、基于客户端：Ribbon
  1)、服务的实例都会注册到注册中心(注册中心会探测服务的活动性，如果挂了，则会将其从清单中剔除)
  2)、客户端缓存注册中心的服务(拉取服务地址)，发送心跳到注册中心刷新服务清单
  3)、请求之前就知道请求地址，直接请求相应的服务实例


====== Ribbon 工作步骤 ======
1、选择 Eureka Server, 它优先选择在同一个Zone且负载较少的Server。
2、再根据用户指定的策略，在从Server取到的服务注册列表中选择一个地址。其中Ribbon提供了多种策略，例如轮询、随机、根据响应时间加权等。









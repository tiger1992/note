
1、架构的分类

  1)、业务架构：从概念层面帮助开发人员更好的理解系统，比如业务流程、业务模块、输入输出、业务域。
  
  2)、应用架构：从逻辑层面帮助开发落地系统，如数据交互关系、应用形式、交互方式，是的整个系统逻辑上更容易理解，步入大家熟知的 SOA 就属于应用架构的范畴。
  
  3)、技术架构：主要解决技术平台选型、如操作系统、中间件、设备、多机房、水平扩展、高可用等问题。
  
2、注意：系统或者架构首先都是为人服务的，系统的有序度高，使用逻辑合理，业务概念清晰是第一位。现在大家讨论更多的是技术架构，如高并发设计，分布式事务处理等，只是因为这个不需要业务上下文背景，比较好相互沟通。具体架构设计时，首先要关注业务架构和应用架构，这个架构新手要特别注意。也是面试时候的痛点！

3、演进过程：

  1)、单台机器部署(应用和数据库在同台机器) --》
  
  2)、数据库与应用分离(应用和数据库在不同台机器) --》为什么这么分呢？
  从计算机本身的角度来考虑的话，一个请求的访问到处理最终到返回，性能瓶颈只会是：CPU、文件 IO、网络 IO、内存、等因素。而一台计算机中这些纬度是有性能瓶颈的，如果某个资源消耗过多，通常会造成系统的响应速度较慢，所以增加一台机器，使得数据库的 IO 和 CPU 资源独占一台机器从而增加性能。

  3)、集群分布式部署(针对性水平扩容)
  
  
====== CPU/IO/内存 ======

1、CPU上下文的切换：因为每个 CPU 核心在同一时刻只能执行一个线程，而 CPU 的调度有几种方式，比如抢占式和轮询等，以抢占式为例，每个线程会分配一定的执行时间，当达到执行时间、线程中有 IO 阻塞或者有高优先级的线程要执行时。CPU 会切换执行其他线程。而在切换的过程中，需要存储当前线程的执行状态并恢复要执行的线程状态，这个过程就是上下文切换。比如 IO、锁等待等场景下也会触发上下文切换，当上下文切换过多时会造成内核占用比较多的 CPU。

2、文件IO：比如频繁的日志写入，磁盘本身的处理速度较慢、都会造成 IO 性能问题。

3、网络IO：带宽不够。

4、内存：包括内存溢出、内存泄漏、内存不足。


====== 负载均衡算法(服务路由，基于负载均衡设备来实现) ======

1、轮询（Round Robin）法 

  1)、将请求按顺序轮流分配到后台服务器上，均衡的对待每一台服务器，而不关心服务器实际的连接数和当前的系统负载。
  
  2)、缺点：当集群中服务器硬件配置不同、性能差别大时，无法区别对待。

2、加权轮询（Weight Round Robin）法 

  1)、解决轮询法不能根据机器性能高低区别对待的缺点。

3、随机法

  1)、通过系统随机函数，根据后台服务器列表的大小值来随机选取其中一台进行访问。随着调用量的增大，其实际效果越来越接近于平均分配流量到后台的每一台服务器，也就是轮询法的效果。


4、源地址哈希法
  
  1)、根据服务消费者请求客户端的 IP 地址，通过哈希函数计算得到一个哈希值，将这个哈希值和服务器列表的大小进行取模运算，得到的结果便是要访问的服务器地址的序号。采用源地址哈希法进行负载均衡，相同的 IP 客户端，如果服务器列表不变，将映射到同一个后台服务器进行访问。

5、最小连接数法 （真正意义上的负载均衡算法）

  1)、根据后端服务器当前的连接情况，动态的选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能的提高后台服务器利用率，将负载合理的分流到每一台服务器。


====== session 问题 ======

1、分布式环境下的 session 共享 解决方案

  1)、session 复制，一般应用容器都支持 Session Replication 方式
  
  2)、集中存储方案，


====== 数据库读写分离 ======

使用场景：【读多写少的应用】

1、数据如何同步

2、应用对数据源如何路由

3、搜索引擎(lucence、solr、elasticsearch)：其实是一个读库：搜索引擎最重要的工作，就是需要根据被搜索的数据来构建索引，而随着被搜索的数据的变化，索引也需要相应变化。搜索引擎技术解决了站内搜索时某些场景下的读的问题，提供了更好的查询效率。
  1)、增加索引
  2)、全量构建 -> 第一次的时候进行构建
  3)、增量构建 -> 增加同步

4、加速数据读取的利器-缓存及分布式存储。

5、在大型网站中，基本上就是在解决存储和计算的问题，所以存储是一个很重要的支撑系统。网站建设初期我们都是从关系型数据库开始的，而且很多时候为了方便，我们会把一些业务逻辑放在数据库里面去做，比如触发器、存储过程。虽然在前期能够很方便的解决问题，但是在未来的发展过程中会带来很多的麻烦，比如数据量大了以后，要做分库分表操作等. 同时，业务发展到一定的体量以后，对存储的需求不能完全通过关系型数据库来满足。


====== 分布式文件系统 ======

1、对一些图片、大文本，使用数据库就不合适了，所以我们会采用分布式文件系统来实现文件存储，分布式文件系统有很多产品、比如淘宝的 TFS、google 的 GFS。还有开源的 HDFS。


====== NoSQL ======

1、NoSQL 我们可以理解成 Not Only SQL、或者是 No SQL。 两种意思都是为了表达在大型网站中，关系型数据库可以解决大部分问题，但是对于不同内容的特征、访问特征、事务特征等对存储的要求是不一样的。NoSQL 是定位于是文件系统和 SQL 关系型数据库之间的范畴。


====== 数据缓存 ======

1、大型网站内部都会用到一些数据缓存，主要用于分担数据库的读的压力，缓存系统一般是用来保存和查询键值对的。应用系统中一般会把热点数据放入到缓存，而缓存的填充也应该是由应用系统完成。如果数据不存在，则从数据库独处数据后放入缓存。随着时间的推移，当缓存容量不够需要清除数据时，最近不被访问的数据就会被清理掉。还有一种方式就是在数据库的数据发生变化后，主动把数据放入到缓存系统中，这样的好处是数据变化时能够及时更新缓存的数据，不会造成读取失效。


====== 什么是分布式架构 ======

1、什么是分布式架构：分布式系统是指位于网络计算机上的组件仅通过传递消息来通信和协调目标系统。

  1)、组件是分布在网络计算机上。
  
  2)、组件之间仅仅通过消息传递来通信并协调行动。
  
  3)、分布式系统其实也可以认为是一种去中心化的实现思路，对于用户来说是无感知的。

2、分布式架构的意义 ？

  1)、升级单机处理处理你能力的性价比越来越低。
  
  2)、单机处理能力存在瓶颈。
  
  3)、对于稳定性和可用性的要求。
  
3、使用的组件：springCloud fescar(seata) RocketMQ
  
  
====== 远程通信 ======

1)、Dubbo/thrift


====== 高可用解决方案 ======

1)、多机房部署：基于当前用户所在的位置去找最近的一个机房的数据进行传输


====== 监控 ======

1)、链路监控：zipkin、traceID

2)、硬件监控：cpu、内存、磁盘

3)、全链路由压力测试、单节点压力测试：loadrunner/jemeter/apache ab工具


====== 架构的发展过程 ======

1)、SOA --》微服务 -》ServiceMesh

















  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
















































  
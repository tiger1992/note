
============ 基本术语及其概念 ============

1、Authentication：身份认证/登录，验证用户是否拥有相应的身份。

2、Authorization：授权，权限验证，验证某个已认证的用户是否拥有某个权限。（粗粒度：验证某个用户是否拥有某个角色，细粒度：验证用户是否拥有对某个资源的访问权限）

3、Session Manager：会话管理，用户登录后就是一次会话，在没退出之前，所有的信息都在会话中；可以是javaSE环境，也可以是Web环境。

4、Cryptography：加密，保护数据的安全性，如密码加密存储到数据，而不是明文存储。

5、Web Support：Web支持,可以非常容易集成到Web环境。

6、Caching：缓存，比如用户登录后，其用户信息、拥有的权限不必每次都去查，可以提高效率。

7、Concurrency：shiro支持多行程，在一个线程中开启另外一个线程，能把权限自动传播过去。

8、Testing：提供测试支持。

9、Run As：允许一个假装为另一个用户(如果他们允许)，的身份进行访问。

10、Remember Me：记住我，登录一次后，下次再来就不需登录了。


============ 注意点 ============ 

1、Shiro不会维护用户和权限，这些需要我们自己去设计提供，然后通过对应的接口注入到Shiro即可。

2、执行流程：Application Code --> Subject(the current user) --> Shiro SecurityManager(manages all Subjects) --> Realm(access your security data)
  1)、Subject：主体，任何与应用交互的‘用户‘，是一个抽象概念，可以理解为一个门面，SecurityManager才是真正的执行者。
  2)、SecurityManager：安全管理器，所有与安全有关的操作都会与值交互，管理着所有的Subject，是Shiro的心脏，可以理解为SpringMVC中的前端控制器。
  3)、Realm：域，Shiro从Realm获取安全数据(用户、角色、权限)，就是说SecurityManager要验证哟胡身份，那么就需要从Realm获取相应的数据进行比较确认是否合法。
  
3、Authenticator 的职责是验证用户帐号，是 Shiro API 中身份验证核心的入口点：
			
  1)、如果验证成功，将返回 AuthenticationInfo 验证信息；此信息中包含了身份及凭证；如果验证失败将抛出相应的 AuthenticationException 实现。

  2)、SecurityManager 接口继承了 Authenticator，另外还有一个 ModularRealmAuthenticator 实现，其委托给多个 Realm 进行验证，验证规则通过 AuthenticationStrategy 接口指定，默认提供的实现：

4、密码要加密/生成不可逆的摘要方式存储

5、编码支持，CodecSupport，提供了 toBytes(str,"utf-8") / toString(bytes,"utf-8") 用于在 byte 数组 /String 之间转换。
  byte[] bytes = CodecSupport.toBytes(str, "UTF-8");
  String str2 = CodecSupport.toString(bytes, "UTF-8");


============ 认证时 .ini 文件中需要指定的几个实现 ============

1、认证器(authenticator),默认ModularRealmAuthenticator可以不需要指定

2、认证策略(authenticationStrategy),默认AtLeastOneSuccessfulStrategy可以不需要指定，提供以下3种认证策略，可以自己实现认证策略逻辑

3、指定 realm 的实现：在里边编写校验逻辑


============ 验证策略 ============

1、 AtLeastOneSuccessfulStrategy 只要有一个 Realm 验证成功即可，和 FirstSuccessfulStrategy 不同，返回所有 Realm 身份验证成功的认证信息

2、 FirstSuccessfulStrategy 只要有一个 Realm 验证成功即可，只返回第一个 Realm 身份验证成功的认证信息，其他的忽略

3、 AllSuccessfulStrategy 所有 Realm 验证成功才算成功，且返回所有 Realm 身份验证成功的认证信息，如果有一个失败就失败了

注1：ModularRealmAuthenticator默认使用的认证器

注2：验证顺序：securityManager.realms=$myRealm1,$myRealm4,$myRealm3,$myRealm2，这里边配置的顺序验证

假设我们有三个 realm：
myRealm1： 用户名 / 密码为 zhang/123 时成功，且返回身份/凭据为 zhang/123；
myRealm2： 用户名 / 密码为 wang/123 时成功，且返回身份/凭据为 wang/123；
myRealm3： 用户名 / 密码为 zhang/123 时成功，且返回身份/凭据为 zhang@163.com/123，和 myRealm1 不同的是返回时的身份变了；


============ 登录流程 ============

1、首先通过 new IniSecurityManagerFactory 并指定一个 ini 配置文件来创建一个 Factory<org.apache.shiro.mgt.SecurityManager> 工厂；

2、接着获取 SecurityManager 并绑定到 SecurityUtils，这是一个全局设置，设置一次即可；

3、通过 SecurityUtils 得到 Subject，其会自动绑定到当前线程；如果在 web 环境在请求结束时需要解除绑定；然后获取身份验证的 Token，如用户名 / 密码；

4、调用 subject.login 方法进行登录，其会自动委托给 SecurityManager.login 方法进行登录；

5、如果身份验证失败请捕获 AuthenticationException 或其子类，常见的如：
  1)、LockedAccountException(锁定的帐号)
  2)、DisabledAccountException(禁用的帐号)
  3)、UnknownAccountException(错误的帐号)
  4)、ExcessiveAttemptsException(登录失败次数过多)
  5)、IncorrectCredentialsException(错误的凭证)
  6)、ExpiredCredentialsException(过期的凭证)
  具体请查看其继承关系；对于页面的错误消息展示，最好使用如 “用户名 / 密码错误” 而不是 “用户名错误”/“密码错误”，防止一些恶意用户非法扫描帐号库；

6、最后可以调用 subject.logout 退出，其会自动委托给 SecurityManager.logout 方法退出。


============ 认证流程 Authentication ============

1、首先调用 Subject.login(token) 进行登录，其会自动委托给 Security Manager，调用之前必须通过 SecurityUtils.setSecurityManager() 设置；

2、SecurityManager 负责真正的身份验证逻辑；它会委托给 Authenticator 进行身份验证；

3、Authenticator 才是真正的身份验证者，Shiro API 中核心的身份认证入口点，此处可以自定义插入自己的实现；

4、Authenticator 可能会委托给相应的 AuthenticationStrategy 进行多 Realm 身份验证，默认 ModularRealmAuthenticator 

5、Authenticator 会把相应的 token 传入 Realm，从 Realm 获取身份验证信息，如果没有返回 / 抛出异常表示身份验证失败了。此处可以配置多个 Realm，将按照相应的顺序及策略进行访问。


============ 授权流程 authorization ============

1、首先调用 Subject.isPermitted*/hasRole* 接口，其会委托给SecurityManager，而SecurityManager接着委托给Authorizer。

2、Authorizer 是真正的授权者，如果我们调用如 isPermitted(“user:view”)，其首先会通过 PermissionResolver 把字符串转换成相应的 Permission 实例。

3、在进行授权之前，其会调用相应的 Realm 获取 Subject 相应的角色/权限用于匹配传入的角色/权限。

4、Authorizer 会判断 Realm 的角色/权限是否和传入的匹配，如果有多个 Realm，会委托给 ModularRealmAuthorizer 进行循环判断。


============ 授权 ============

1、授权即访问控制，在应用中控制着谁能访问哪些资源(如访问页面、编辑数据、页面操作等)，在授权中需要了解的几个关键对象
  1)、主体(Subject)：任何与应用交互的‘用户‘，在 Shiro 中使用 Subject 代表该用户。用户只有授权后才允许访问相应的资源。
  2)、资源(Resource)：在应用中用户可以访问的任何东西，比如JSP页面、查看/编辑某些数据、访问某个业务方法、打印文本等等都是资源。
  3)、权限(Permission)：安全策略中的原子授权单位，表示在应用中用户能不能访问某个资源，
  4)、角色(Role)：角色代表了操作集合(一组权限)，一般是赋予用户角色而不是权限，如：项目经理、技术总监、CTO、开发工程师等都是角色，他们有一组不同的权限。
  
2、角色配置：规则即：“用户名=密码,角色1，角色2”，如果需要在应用中判断用户是否有相应角色，就需要在相应的 Realm 中返回角色信息，也就是说 Shiro 不负责维护用户-角色信息，需要应用提供，Shiro 只是提供相应的接口方便验证，后续会介绍如何动态的获取用户角色。
  
2、权限配置
  1)、对资源 user 拥有create、update权限:【role1=user:create,user:update】
  2)、对资源system:user拥有create、update、delete、view权限：【role="system:user:create,update,delete,view"】
  3)、对资源system:user拥有所有权限：【role=system:user:*】(推荐这种写法)、【role=system:user】
  4)、对资源拥有所有权限（如匹配user:view）：【role=*:view】
  5)、对资源拥有所有权限（如匹配system:user:view，即和之上的不等价）：【role62=*:*:view】
  6)、对资源user的1实例拥有view权限：【role=user:view:1】
  7)、对资源user的1实例拥有所有权限：【role=user:*:1】
  8)、对资源user的所有实例拥有auth权限：【role=user:auth:*】
  9)、对资源user的所有实例拥有所有权限：【role=user:*:*】
  10)、【role=menu:*:*】、【role=menu:*】

3、 实现位移方式的权限(BitPermission)：
  1)、权限字符串格式：【+资源字符串+权限位+实例ID】，以 + 开头中间通过 + 分割。
  2)、【0】：表示所有权限、【1】：新增(二进制：0001)、【2】：修改(二进制：0010)、【4】：删除(二进制：0100)、【8】：查看(二进制：1000)
  例如：【+user+10】表示对资源 user 拥有修改/查看权限。


============ 字符串通配符权限 ============

1、规则：【“资源标识符:操作:对象实例ID”】，即对哪个资源的哪个实例可以进行什么操作。

2、其默认支持通配符权限字符串：【:】表示资源/操作/实例的分割；【,】表示操作的分割；【*】表示任意资源/操作/实例。


============ 性能问题 ============

通配符匹配方式比字符串相等匹配来说是更复杂的，因此需要花费更长时间，但是一般系统的权限不会太多，且可以配合缓存来提供其性能，如果这样性能还达不到要求我们可以实现位操作算法实现性能更好的权限匹配。另外实例级别的权限验证如果数据量太大也不建议使用，可能造成查询权限及匹配变慢。可以考虑比如在sql查询时加上权限字符串之类的方式在查询时就完成了权限匹配。

sql = "select role from sys_users u, sys_roles r,sys_users_roles ur where u.username=? and u.id=ur.user_id and r.id=ur.role_id";


============ shiro拦截器机制 ============

1、NameableFilter：给 Filter 起个名字，如果没有设置默认就是 FilterName；

2、OncePerRequestFilter：用于防止多次执行 Filter 的(一次请求只会走一次拦截器链), enabled=true 表示开启,false表示不开启。

3、ShiroFilter：整个 Shiro 的入口点，用于拦截需要安全控制的请求进行处理，这个之前已经用过了。

4、AdviceFilter：提供了 AOP 风格的支持，类似于 SpringMVC 中的 Interceptor：
  1)、preHandler：在拦截器链执行之前执行；如果返回true则继续拦截器链；否则中断后续的拦截器链的执行直接返回；进行预处理（如基于表单的身份验证、授权）
  2)、postHandle；在拦截器链执行完成后执行；进行后处理（如记录执行时间之类的）；
  3)、afterCompletion：不管有没有异常都会执行，可以进行清理资源（如解除 Subject 与线程的绑定之类的）。
  
5、PathMatchingFilter：基于Ant的请求路径匹配功能及拦截器参数解析的功能，如"roles[admin,user]"自动根据"，"分割解析到一个路径参数配置并绑定到相应的路径。
  1)、pathsMatch：该方法用于 path 与请求路径进行匹配的方法；如果匹配返回 true；
  2)、onPreHandle：在 preHandle 中，当 pathsMatch 匹配一个路径后，会调用 opPreHandler 方法并将路径绑定参数配置传给 mappedValue；然后可以在这个方法中进行一些验证（如角色授权），如果验证失败可以返回 false 中断流程；默认返回 true；也就是说子类可以只实现 onPreHandle 即可，无须实现 preHandle。如果没有 path 与请求路径匹配，默认是通过的（即 preHandle 返回 true）。

6、AccessControlFilter：提供了访问控制的基础功能；比如是否允许访问/当访问拒绝时如何处理等
  1)、isAccessAllowed：表示是否允许访问；mappedValue 就是[urls]配置中拦截器参数部分，如果允许访问返回 true，否则 false；
  2)、onAccessDenied：表示当访问拒绝时是否已经处理了；如果返回 true 表示需要继续处理；如果返回 false 表示该拦截器实例已经处理了，将直接返回即可；
  3)、onPreHandle：会自动调用这两个方法决定是否继续处理。
  
7、拦截器链：1、先执行 Shiro 自己的 Filter 链；2、再执行 Servlet 容器的 Filter 链（即原始的 Filter）。


============ shiro会话管理 ============

1、Subject.getSession()等价Subject.getSession(true)，没有创建Session则返回null，默认如果启用会话存储则在创建Subject时会主动创建一个Session。
  1)、获取当前会话的唯一标识：【session.getId();】
  2)、获取当前 Subject 的主机地址：【session.getHost();】  HostAuthenticationToken.getHost() 提供
  3)、获取 / 设置当前 Session 的过期时间；如果不设置默认是会话管理器的全局过期时间:【session.getTimeout();】、【 session.setTimeout(seconds);】
  4)、启动时间及最后访问时间；【session.getStartTimestamp();】、【session.getLastAccessTime();】
    (1)、JavaSE环境：需要自己定期调用 session.touch() 去更新最后访问时间。
    (2)、Web环境：每次进入 ShiroFilter 都会自动调用 session.touch() 来更新最后访问时间。
  5)、销毁会话：当 Subject.logout() 时会自动调用 stop 方法来销毁会话。如果在 web 中，调用 javax.servlet.http.HttpSession. invalidate() 也会自动调用 Shiro Session.stop 方法进行销毁 Shiro 的会话。
  
2、设置 / 获取 / 删除会话属性；在整个会话范围内都可以对这些属性进行操作
  session.setAttribute("key", "123");
  Assert.assertEquals("123", session.getAttribute("key"));
  session.removeAttribute("key");
  
3、Shiro 提供了三个默认实现：
  1)、DefaultSessionManager：DefaultSecurityManager 使用的默认实现，用于 JavaSE 环境；
    (1)、ini 配置：【sessionManager=org.apache.shiro.session.mgt.DefaultSessionManager】
    (2)、设置会话的全局过期时间（毫秒为单位），默认 30 分钟：【sessionManager.globalSessionTimeout=1800000】
  2)、ServletContainerSessionManager：DefaultWebSecurityManager 使用的默认实现，用于 Web 环境，其直接使用 Servlet 容器的会话；
    (1)、ini 配置：【sessionManager=org.apache.shiro.web.session.mgt.ServletContainerSessionManager】
  3)、DefaultWebSessionManager：用于 Web 环境的实现，可以替代 ServletContainerSessionManager，自己维护着会话，直接废弃了 Servlet 容器的会话管理。
    (1)、ini 配置：【sessionManager=org.apache.shiro.web.session.mgt.ServletContainerSessionManager】
    (2)、sessionIdCookie.name：设置 Cookie 名字，默认为 JSESSIONID；
    (3)、sessionIdCookie.domain：设置 Cookie 的域名，默认空，即当前访问的域名；
    (4)、sessionIdCookie.path：设置 Cookie 的路径，默认空，即存储在域名根下；
    (5)、sessionIdCookie.maxAge：设置 Cookie 的过期时间，秒为单位，默认 - 1 表示关闭浏览器时过期 Cookie；
    (6)、sessionIdCookie.httpOnly：如果设置为 true，则客户端不会暴露给客户端脚本代码，使用 HttpOnly cookie 有助于减少某些类型的跨站点脚本攻击；此特性需要实现了 Servlet 2.5 MR6 及以上版本的规范的 Servlet 容器支持；
    (7)、sessionManager.sessionIdCookieEnabled：是否启用 / 禁用 Session Id Cookie，默认是启用的；如果禁用后将不会设置 Session Id Cookie，即默认使用了 Servlet 容器的 JSESSIONID，且通过 URL 重写（URL 中的 “;JSESSIONID=id” 部分）保存 Session Id。
    (8)、sessionIdCookie 是 sessionManager 创建会话 Cookie 的模板：

4、会话监听器：用于监听会话创建、过期及停止事件：实现 SessionListener 接口，如果只想监听某一个事件，可以继承 SessionListenerAdapter。
  1)、ini 配置：
    (1)、【sessionListener1=com.github.zhangkaitao.shiro.chapter10.web.listener.MySessionListener1】
    (2)、【sessionListener2=com.github.zhangkaitao.shiro.chapter10.web.listener.MySessionListener2】
    (3)、【sessionManager.sessionListeners=$sessionListener1,$sessionListener2】

5、会话存储/持久化：
  1)、pom.xml 配置文件，添加缓存api
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-ehcache</artifactId>
      <version>1.2.2</version>
    </dependency>
  2)、ini 配置：
    sessionDAO=org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
	#设置会话 ID 生成器
	sessionIdGenerator=org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator
    sessionDAO.sessionIdGenerator=$sessionIdGenerator 
	#设置 Session 缓存名字，默认就是 shiro-activeSessionCache
    sessionDAO.activeSessionsCacheName=shiro-activeSessionCache
    sessionManager.sessionDAO=$sessionDAO
	#缓存管理器，用于管理缓存的，此处使用 Ehcache 实现
    cacheManager=org.apache.shiro.cache.ehcache.EhCacheManager
	#设置 ehcache 缓存的配置文件
    cacheManager.cacheManagerConfigFile=classpath:ehcache.xml
    securityManager.cacheManager=$cacheManager 

  3)、ehcache.xml配置
    <cache name="shiro-activeSessionCache"
         maxEntriesLocalHeap="10000"
         overflowToDisk="false"
         eternal="false"
         diskPersistent="false"
         timeToLiveSeconds="0"
         timeToIdleSeconds="0"
         statistics="true"/> 

6、会话验证：定期的检测会话是否过期，Shiro 提供了会话验证调度器 SessionValidationScheduler 来做这件事情。
  1)、sessionValidationScheduler：会话验证调度器，sessionManager 默认就是使用 ExecutorServiceSessionValidationScheduler，其使用 JDK 的 ScheduledExecutorService 进行定期调度并验证会话是否过期；
  2)、sessionValidationScheduler.interval：设置调度时间间隔，单位毫秒，默认就是 1 小时；
  3)、sessionValidationScheduler.sessionManager：设置会话验证调度器进行会话验证时的会话管理器；
  4)、sessionManager.globalSessionTimeout：设置全局会话超时时间，默认 30 分钟，即如果 30 分钟内没有访问会话将过期；
  5)、sessionManager.sessionValidationSchedulerEnabled：是否开启会话验证器，默认是开启的；
  6)、sessionManager.sessionValidationScheduler：设置会话验证调度器，默认就是使用 ExecutorServiceSessionValidationScheduler。





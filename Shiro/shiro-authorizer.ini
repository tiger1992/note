[main]
# 根对象，默认 DefaultSecurityManager，不需要指定
#securityManager=org.apache.shiro.mgt.DefaultSecurityManager

# 1、指定认证器(authenticator),如使用默认(ModularRealmAuthenticator)可不指定
# 可以自己实现自己的认证器，继承 ModularRealmAuthenticator
#authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator

# 2、指定认证策略，向认证器中注入认证策略,如使用默认(AtLeastOneSuccessfulStrategy)可不指定
#atLeastOneSuccessfulStrategy=org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
#securityManager.authenticator.authenticationStrategy=$atLeastOneSuccessfulStrategy

# 3、向安全管理器中注入认证器
#securityManager.authenticator=$authenticator

# 4、指定授权器，使用默认的，ModularRealmAuthorizer
authorizer=org.apache.shiro.authz.ModularRealmAuthorizer

# 5、指定授权解析器，解析权限字符串到 Permission
#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
permissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver
authorizer.permissionResolver=$permissionResolver

# 6、指定角色解析器，MyRolePermissionResolver
rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver
authorizer.rolePermissionResolver=$rolePermissionResolver

# 7、向安全管理器中注入授权器
securityManager.authorizer=$authorizer

# 8、指定realm实现，放在securityManager.authorizer赋值之后
#（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）
realm=com.github.zhangkaitao.shiro.chapter3.realm.MyRealm
securityManager.realms=$realm

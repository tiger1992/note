
高可用mysql集群解决方案
1、弱一致性高可用数据库解决方案(速度快)：Replication，异步复制，无法保证每个节点中的数据是一致的，存储低价值数据，例如新闻信息。无需实时展现处理的数据
2、强一致性高可用数据库解决方案(速度慢)：percona-xtradb-cluster[对mysql镜像的一个封装 pxc 方便搭建强一致性高可用的集群],例如订单，红包等等实时性强的数据
 

====== 强一致性高可用 mysql 集群 ======

1、拉取pxc镜像：【docker pull percona/percona-xtradb-cluster:5.7.21】，存在于 docker hub 中，可以直接拉取使用

2、复制pxc镜像(实则重命名)：【docker tag percona/percona-xtradb-cluster:5.7.21 pxc】

3、删除pxc原来的镜像：【docker rmi percona/percona-xtradb-cluster:5.7.21】

4、创建一个单独的网段，给mysql数据库集群使用：
  【docker network create --subnet=172.19.0.0/24 pxc-net】
  【docker network inspect pxc-net】 [查看详情]
  【docker network rm pxc-net】 [删除],不执行
  
5、创建和删除 volume
  创建：【docker volume create --name v1】
  删除：【docker volume rm v1】
  查看详情：【docker volume inspect v1】
  
6、搭建PXC[MySQL]集群，数据挂载点
  准备3个数据卷,如果3个数据库的挂载点都是一样呢？例如都是挂载在 v1 
  【docker volume create --name v1】
  【docker volume create --name v2】
  【docker volume create --name v3】
  
7、运行三个PXC容器
  【docker run -d --name=mysql_node1 -p 3301:3306 -v v1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=123456 --privileged  --net=pxc-net --ip 172.19.0.2 pxc】
  
  注意：下边两个节点(node2和node3)加入到mysql_node1节点中
  【docker run -d --name=mysql_node2 -p 3302:3306 -v v2:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e CLUSTER_JOIN=mysql_node1 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=123456 --privileged  --net=pxc-net --ip 172.19.0.3 pxc】
  
  【docker run -d --name=mysql_node3 -p 3303:3306 -v v3:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -e CLUSTER_JOIN=mysql_node1 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=123456 --privileged  --net=pxc-net --ip 172.19.0.4 pxc】
  
  
  
====== mysql集群负载均衡设置 ======

1、拉取 haproxy 镜像：【docker pull haproxy】

2、创建 haproxy 配置文件，这里使用 bind mounting 的方式，配置文件挂载在宿主机中【mkdir /tmp/haproxy】,【touch haproxy.cfg】,文件内容如下
【
global
	#工作目录，这边要和创建容器指定的目录对应
	chroot /usr/local/etc/haproxy
	#日志文件
	log 127.0.0.1 local5 info
	#守护进程运行
	daemon
defaults
	log	global
	mode	http
	#日志格式
	option	httplog
	#日志中不记录负载均衡的心跳检测记录
	option	dontlognull
 	#连接超时（毫秒）
	timeout connect 5000
 	#客户端超时（毫秒）
	timeout client  50000
	#服务器超时（毫秒）
 	timeout server  50000

    #监控界面	
    listen  admin_stats
	#监控界面的访问的IP和端口
	bind  0.0.0.0:8888
	#访问协议
 	mode        http
	#URI相对地址
 	stats uri   /dbs_monitor
	#统计报告格式
 	stats realm     Global\ statistics
	#登陆帐户信息
 	stats auth  admin:admin
	#数据库负载均衡
	listen  proxy-mysql
	#访问的IP和端口，haproxy开发的端口为3306
 	#假如有人访问haproxy的3306端口，则将请求转发给下面的数据库实例
	bind  0.0.0.0:3306  
 	#网络协议
	mode  tcp
	#负载均衡算法（轮询算法）
	#轮询算法：roundrobin
	#权重算法：static-rr
	#最少连接算法：leastconn
	#请求源IP算法：source 
 	balance  roundrobin
	#日志格式
 	option  tcplog
	#在MySQL中创建一个没有权限的haproxy用户，密码为空。
	#Haproxy使用这个账户对MySQL数据库心跳检测
 	option  mysql-check user haproxy
	server  MySQL_1 172.19.0.2:3306 check weight 1 maxconn 2000  
 	server  MySQL_2 172.19.0.3:3306 check weight 1 maxconn 2000  
	server  MySQL_3 172.19.0.4:3306 check weight 1 maxconn 2000 
	#使用keepalive检测死链
 	option  tcpka
】

3、创建haproxy容器
  【docker run -it -d -p 8888:8888 -p 3304:3306 -v /tmp/haproxy:/usr/local/etc/haproxy --name haproxy_mysql --privileged --net=pxc-net haproxy】
  
4、根据haproxy.cfg文件启动 haproxy：
  【docker exec -it haproxy_mysql bash】
  【haproxy -f /usr/local/etc/haproxy/haproxy.cfg】
  
5、win上的datagrip连接 haproxy_mysql，如果链接失败请看 第8点
  ip:192.168.3.10
  port:3304
  user:root
  password:123456
  
6、在haproxy连接上进行数据操作，然后查看数据库集群各个节点是否为预期效果

7、监控网页：【http://192.168.3.10:8888/dbs_monitor】，账户密码都是 admi

8、负载均衡链接授权
  CREATE USER 'haproxy'@'%' IDENTIFIED BY '';
[小技巧[如果创建失败，可以先输入一下命令]:
    drop user 'haproxy'@'%';
    flush privileges;
    CREATE USER 'haproxy'@'%' IDENTIFIED BY '';
]
  
  
  
  
  
  
  
  
  
  
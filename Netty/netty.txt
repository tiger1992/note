

====== netty 预设前置实战案例 ======

1、Netty 基本上是作为架构的技术底层而存在的，主要完成高性能的网络通信。RPC框架的底层通信就是用的Netty

2、目前流行的 RPC 服务治理框架主要有 Dubbo 和 Spring Cloud，下面我们以比较经典的 Dubbo 为例。Dubbo 核心模块主要有四个：Registry 注册中心、Provider 服务端、Consumer 消费端、Monitor 监控中心。

3、主要模块包括：

  1)、api：主要用来定义对外开放的功能与服务接口。
  
  2)、protocol：主要定义自定义传输协议的内容。
  
  3)、registry：主要负责保存所有可用的服务名称和服务地址。
  
  4)、provider：实现对外提供的所有服务的具体功能。
  
  5)、consumer：客户端调用。
  
  6)、monitor：完成调用链监控。
  
4、在 Netty 中要完成一个自定义协议，远程调用 Java 代码哪些内容是必须由网络来传输的呢？
  1.服务名称
  2.需要调用该服务的哪个方法
  3.方法的实参

5、梳理一下基本的实现思路，主要完成一个这样的功能：API 模块中的接口功能在服务端实现（并没有在客户端实现）。因此，客户端调用 API 中定义的某一个接口方法时，实际上是要发起一次网络请求去调用服务端的某一个服务。而这个网络请求首先被注册中心接收，由注册中心先确定需要调用的服务的位置，再将请求转发至真实的服务实现，最终调用服务端代码，将返回值通过网络传输给客户端。整个过程对于客户端而言是完全无感知的，就像调用本地方法一样。


====== 传统RPC框架性能差的原因 ======

1、阻塞IO不具备弹性伸缩能力，高并发导致宕机。

2、Java序列化编解码性能问题。

3、传统IO线程模型过多占用CPU资源。

4、Netty合理处理 IO(传输)、协议、线程模型之间的关系，使得高性能成为可能。


====== 高性能的三个主题 ======

1、IO模型：用什么样的通道将数据传输发送给对方(BIO、NIO、AIO)，IO模型很大程度上决定了框架的性能。

2、数据协议：http或者内部私有协议。协议不同，性能模型也不同，相比于共有协议，内部私有协议的性能通常可以被设计的更优。

3、线程模型：数据报如何读取？读取之后编解码在哪个线程进行，编解码的消息如何派发，Reactor线程模型的不同，对性能的影响也非常大。


====== 异步非阻塞通信 ======

1、NioEventLoop 聚合多路复用器 Selector，可以同时并发处理成百上千个客户端Channel，由于读写操作都是非阻塞的，这就可以充分发挥提升IO线程的运算效率，避免由于频繁IO阻塞导致的线程挂起。


====== 零拷贝 ======

1、接收和发送 ByteBuffer 使用堆外内存进行 Socket 读写。

2、提供组合 Buffer 对象，可以聚合多个 ByteBuffer 对象。

3、transferTo()直接将文件缓冲区的数据发送到目标Channel。


====== 内存池 ======

1、Pooled 与 UnPooled (池化与非池化)

2、UnSafe和非UnSafe（底层读写与应用程序读写）

3、Heap和Direct（堆内存与堆外内存）


====== 高效的Reactor线程模型 ======

1、Reactor单线程模型。
  EventLoopGroup bossGroup = new NioEventLoopGroup(1);
  ServerBootstrap server = new ServerBootstrap();
  server.group(bossGroup);

2、Reactor多线程模型。
  EventLoopGroup bossGroup = new NioEventLoopGroup(128);
  ServerBootstrap server = new ServerBootstrap();
  server.group(bossGroup);

3、主从Reactor多线程模型。
  EventLoopGroup bossGroup = new NioEventLoopGroup();
  EventLoopGroup workerGroup = new NioEventLoopGroup();
  ServerBootstrap b = new ServerBootstrap();
  b.group(bossGroup, workerGroup);

====== 高效的并发编程 ======

1、volatile的大量、正确使用;

2、CAS和原子类的广泛使用；

3、线程安全容器的使用；

4、通过读写锁提升并发性能。


====== 高性能的序列化框架 ======

1、序列化后的码流大小（网络带宽的占用）；

2、序列化&反序列化的性能（CPU资源占用）；

3、是否支持跨语言（异构系统的对接和开发语言切换）。


====== 灵活的TCP参数配置能力 ======
  合理设置 TCP 参数在某些场景下对于性能的提升可以起到显著的效果，例如 SO_RCVBUF 和 SO_SNDBUF。如果设置不当，对性能的影响是非常大的。下面我们总结下对性能影响比较大的几个配置项：
  
1、1) SO_RCVBUF 和 SO_SNDBUF：通常建议值为 128K 或者 256K；

2、SO_TCPNODELAY：NAGLE 算法通过将缓冲区内的小封包自动相连，组成较大的封包，阻止大量小封包的发送阻塞网络，从而提高网络应用效率。但是对于时延敏感的应用场景需要关闭该优化算法；

3、软中断：如果 Linux 内核版本支持 RPS（2.6.35 以上版本），开启 RPS 后可以实现软中断，提升网络吞吐量。RPS根据数据包的源地址，目的地址以及目的和源端口，计算出一个 hash 值，然后根据这个 hash 值来选择软中断运行的cpu，从上层来看，也就是说将每个连接和 cpu 绑定，并通过这个 hash 值，来均衡软中断在多个 cpu 上，提升网络并行处理性能。


====== Netty核心组件之Channel启动 ======

1、newChannel();创建Channel对象：服务端Channel的创建

  1)、bind()[用户代码入口]
  2)、initAndRegister()[初始化并注册]
  3)、newChannel()[创建服务端channel]
    反射创建服务端Channel

  4)、init()[初始化服务端Channel]
  
2、init();初始化预设参数；

3、doBind();绑定端口；

4、register();注册到Selector。


1、无锁化的串行设计理念：Netty 的 NioEventLoop 读取到消息之后，直接调用 ChannelPipeline的 fireChannelRead(Object msg)，只要用户不主动切换线程，一直会由 NioEventLoop 调用到用户的 Handler，期间不进行线程切换，这种串行化处理方式避免了多线程操作导致的锁的竞争，从性能角度看是最优的。

2、Netty 有一个强大和灵活之处就是基于 Pipeline 的自定义 handler 机制。基于此，我们可以像添加插件一样自由组合各种各样的 handler 来完成业务逻辑。例如我们需要处理 HTTP 数据，那么就可以在 pipeline 前添加一个针对 HTTP编、解码的 Handler，然后接着添加我们自己的业务逻辑的 handler，这样网络上的数据流就向通过一个管道一样, 从不同的 handler 中流过并进行编、解码，最终在到达我们自定义的 handler 中。


调用 AbstractNioMessageChannel 的 doReadMessages()方法。总结一下：
1、Netty 中 Selector 事件轮询是从 EventLoop 的 execute()方法开始的。
2、在 EventLoop 的 execute()方法中，会为每一个任务创建一个独立的线程，并保存到无锁化串行任务队列。
3、线程任务队列的每个任务实际调用的是 NioEventLoop 的 run()方法。
4、在 run 方法中调用 processSelectedKeys()处理轮询事件。


通常来说，NioEventLoop 负责执行两个任务：第一个任务是作为 IO 线程，执行与 Channel 相关的 IO 操作，包括调用 Selector 等待就绪的 IO 事件、读写数据与数据的处理等；而第二个任务是作为任务队列，执行 taskQueue 中的任务，例如用户调用 eventLoop.schedule 提交的定时任务也是这个线程执行的。

大家应该发现了规律：inbound 类似于是事件回调（响应请求的事件），而 outbound 类似于主动触发（发起请求的事件）。注意，如果我们捕获了一个事件，并且想让这个事件继续传递下去，那么需要调用 Context 对应的传播方法fireXXX，例如：




====== 及时通信软件Web版，netty实现 ======

一、自定义报文协议

1、上行命令：指服务器向客户端发送的消息内容

  1)、SYSTEM：系统
	[命令类型][命令发送时间][命令接收人] - 系统提示内容
	[SYSTEM][124343423123][Tiger] – Student加入聊天室
	
2、下行命令：指客户端想服务器发送的命令

  1)、LOGIN：登录
    [命令类型][命令发送时间][命令发送人][终端类型]
    [LOGIN][124343423123][Tiger][WebSocket]
	
  2)、FLOWER：发送送鲜花特效
    [命令类型][命令发送时间][命令发送人][终端类型][命令接收人]
    [FLOWER][124343423123][you][WebSocket][ALL]

  3)、CHAT：聊天
    [命令类型][命令发送时间][命令发送人][命令接收人] – 聊天内容
	[CHAT][124343423123][Tiger][ALL] - 大家好，我是Tiger！
	
  4)、LOGOUT：注销
    [命令类型][命令发送时间][命令发送人]
	[LOGOUT][124343423123][Tiger]

二、环境准备

1、Netty版本： 4.1.6.Final

2、FastJSON：1.2.4

3、MsgPack：0.6.12

4、Lombok：1.16.10

三、协议支持

1、同时支持 WebSocket、Socket、HTTP

2、自定义报文协议IMP，IMMessage

3、序列化框架MsgPack

4、自定义编解码器：IMDecoder、IMEncoder

5、用户交互终端：控制台、浏览器


====== netty中的设计模式 ======

1、单例模式：




































































































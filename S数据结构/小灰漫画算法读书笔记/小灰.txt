

 使用LRU算法来淘汰冷数据，使用Bitmap算法来统计用户特征等。

1、什么是算法：在计算机领域里，算法是一系列程序指令，用于处理特定的运算和逻辑问题。

2、算法的好坏：

  1)、时间复杂度：对一个算法运行时间长短的量度，用大O表示，记作T(n)=O(f(n))，包括O(1)、O(logn)、O(n)、O(nlogn)、O(n2)等。
  
    1.场景1:【T(n)=3n=O(n)】，执行次数是线性的。【for(int i=0; i<n; i++){}】
	2.场景2:【T(n)=5logn=O(logn)】，执行次数是用对数计算的。【for(int i=n; i>1; i/=2){}】
	3.场景3:【T(n)=2=O(1)】，执行次数是常量。【无循环】
	4.场景4:【T(n)=0.5n2+0.5n=O(n2)】，执行次数是用多项式计算的。【for(int i=0; i<n; i++){for(int j=0; j<i; j++){}}】
	
	若存在函数f(n)，使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n))，称为O(f(n))，O为算法的渐进时间复杂度，简称为时间复杂度。
  
  2)、空间复杂度
  
    1.常量空间:当算法的存储空间大小固定，和输入规模没有直接的关系时，空间复杂度记作O(1)。
	2.线性空间：当算法分配的空间是一个线性的集合（如数组），并且集合大小和输入规模n成正比时，空间复杂度记作O(n)。
	3.二维空间：当算法分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模n成正比时，空间复杂度记作O(n2)。
	4.递归空间：递归是一个比较特殊的场景。虽然递归代码中并没有显式地声明变量或集合，但是计算机在执行程序时，会专门分配一块内存，用来存储“方法调用栈”。空间复杂度和递归深度成正比
	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
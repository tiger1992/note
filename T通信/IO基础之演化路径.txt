
====== Netty能帮助我们解决什么问题 ======

1、是一个开源的封装IO操作的框，简化开发一系列解决方案的集合。

2、复杂的业务场景中，没有说用一个单独的IO API来解决问题，一般是IO+多线程来解决问题，那么Netty就是这样的一个框架。

3、Netty 基本上是作为架构的技术底层而存在的，主要完成高性能的网络通信。


====== 几个概念的理解 ======

1、阻塞(Block)和非阻塞(Non-Block)。参照IO操作

  1)、阻塞：需要等待缓冲区中的数据准备好过后才处理其他的事情，否则一直等待在那里。
  
  2)、非阻塞：线程访问数据缓冲区时，不管数据有没有准备好，都直接返回。
 
2、同步(Synchronization)和异步(Asynchronous)。参照时间，同一时间只能操作一件事情。

  1)、同步：应用程序要直接参与IO读写的操作。
  
  2)、异步：所有的IO读写交给操作系统去处理，应用程序只需要等待通知。
  
3、几种IO，三种IO不断改进的过程

  1)、BIO：同步阻塞IO。
  
  2)、NIO：非阻塞同步IO （线程池）。
  
  3)、AIO：异步非阻塞IO （事件机制），当数据准备好后，会通过时间回调来告知。

  目的：NIO的操作过于繁琐，于是出现Netty：对这一系列非常繁琐的操作进行了封装。

4、NIO三大套件

  1)、缓冲(Buffer)：
  
  2)、选择器(Selector)：
    1.向 Selector 对象注册感兴趣的事件。
    2.从 Selector 中获取感兴趣的事件。
    3.根据不同的事件进行相应的处理。

  3)、通道(Channel)：通道是一个对象，通过它可以读取和写入数据，当然了所有数据都通过 Buffer 对象来处理
  
5、使用 NIO 中非阻塞 I/O 编写服务器处理程序，大体上可以分为下面三个步骤：


====== Java NIO 的工作原理 ======

1、由一个专门的线程来处理所有的 IO 事件，并负责分发。

2、事件驱动机制：事件到的时候触发，而不是同步的去监视事件。

3、线程通讯：线程之间通过 wait,notify 等方式通讯。保证每次上下文切换都是有意义的，减少无谓的线程切换。
  
  




















  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  



















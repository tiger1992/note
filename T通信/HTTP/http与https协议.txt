
====== HTTP协议 ======

1、HTTP 协议是基于应用层的协议，并且在传输层使用的 TCP 的可靠性通信协议。

2、URI(Uniform Resource Identifier)：统一资源标志符，表示的是web上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都由一个URI进行定位的。

3、URL(Uniform Resource Locator)：统一资源定位符，是URI的一个子集。采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL是URI概念的一种实现方式。

4、MIME Type：是描述消息内容类型的因特网标准，常见的几种类型

  1)、文本文件：text/html,text/plain,text/css,application/xhtml+xml,application/xml,application/json
  
  2)、图片文件：image/jpeg,image/gif,image/png
  
  3)、视频文件：video/mpeg,video/quicktime
  
5、通过两种方式来设置文件的渲染类型

  1)、Accept：表示客户端希望接受的数据类型，即告诉服务器我需要什么媒体类型的数据，此时服务器应该根据 Accept 请求头生产指定媒体类型的数据。
  
  2)、Content-Type：表示发送端发送的实体数据类型，比如代码中设置：resposne.setContentType("application/json;charset=utf-8")，表示服务端返回的数据格式是json。
  
6、状态码：描述服务端向客户端返回的请求处理结果状态，浏览器可以知道服务器是正常处理请求还是出现了错误。

  1)、1XX(Informational,信息状态码)：接收的请求正在处理。
  
  2)、2XX(Success,成功状态码)：请求正常处理完毕。
  
  3)、3XX(Redirection,重定向状态码)：需要进行附加操作以完成请求。
  
  4)、4XX(Client Error,客户端请求错误码)：服务器无法处理请求。
  
  5)、5XX(Sever Error,服务端错误代码)：服务器处理请求出错。

  大家见得比较多的错误码：
  200：一切正常
  301：永久重定向
  404：请求资源不存在
  500：服务端内部错误

7、8 种方法来表示对于不同请求的操作方式，使用最多的是（get和post）

  1)、GET(查询操作)：获取资源，不会改变资源信息，不支持大数据的传输，参数明文显示，敏感信息请求不要使用。
  
  2)、POST(创建操作)：一般用户客户端传输一个实体给到服务端，让服务端去保存，信息在请求体中，加密处理。
  
  3)、PUT(更新操作)：向服务器发送数据。
  
  4)、DELETE(删除操作)：客户端发起一个 Delete 请求要求服务端把某个数据删除。
  
  5)、HEAD:获得报文首部。
  
  6)、OPTIONS：询问支持的方法。
  
  7)、TRACE：追踪路径。
  
  8)、CONNECT：用隧道协议连接代理。

8、http 协议包含两个报文，一个是请求报文，一个是响应报文

  1)、请求报文格式包含三个部分(起始行、首部字段、主体)
    1.起始行：方法	URI	协议版本
	2.请求首部字段：
	3.主体(get请求没有主体)
	
  2)、响应报文
    1.起始行：协议版本	状态码	状态码短语	
	2.请求首部字段：
	3.主体

9、Http 协议的特点

  1)、Http 无状态协议HTTP 协议是无状态的，什么是无状态呢？就是说 HTTP 协议本身不会对请求和响应之间的通信状态做保存。
  
  2)、客户端支持的Cookie：Http 协议中引入了 cookie 技术，用来解决 http 协议无状态的问题。通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态；Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。

  3)、服务端支持的 session 

10、Https 协议：基于http协议之上加 SSL（Secure Socket Layer）或者 TLS（Transport Layer Security） 安全层传输协议组合使用用于构造加密通道，现在的 HTTPS 都是用的 TLS 协议，因此 SSL 依然是 HTTPS 的代名词

  1)、由于 HTTP 协议通信的不安全性，防止信息在传输过程中遭到泄漏或者篡改，改为 https。
  
  2)、对称加密(一把密钥)：客户端和服务端同时拥有,可以用来加密和解密。
  
  3)、非对称加密(两把密钥)：公钥(pub客户端，对外公开)、私钥(pri服务端)，性能相对较对称加密低。
    1.RSA -> 生成一对密钥(公钥/私钥)。
	2.客户端可以利用公钥对服务端用私钥加密的数据进行解密。
	3.服务端可以利用私钥对客户端用公钥加密的数据进行解密。
  
  4)、md5/sha/...(摘要)，验证数字证书是否由正规机构（CA机构）颁发的，证书验证公钥内置在浏览器中。

11、实现机制（如何安全将公钥颁发给客户端）
  
  1)、对称加密：使用密钥进行对称加密传输。
  
  2)、非对称加密：协商密钥
  
  3)、摘要算法：使用sha、md5防止数据传输过程中被篡改的可能性。

12、实现流程

  1)、服务端生成公钥A、私钥A。
  
  2)、服务端将公钥A发送给CA机构。
  
  3)、CA机构(自己生成一对密钥，ca.pub/ca.pri)使用ca.pub对公钥A进行加密，把CA证书给到服务端。
  
  4)、服务端配置443的监听、CA证书、私钥。
  
  5)、客户端发来https请求，服务端返回CA证书。
  
  6)、客户端用浏览器内置的ca.pub验证CA证书的合法性，拿到公钥A，生成随机数，基于公钥A进行加密。
  
  7)、服务端用私钥A解密公钥A加密的内容。
  
  8)、client.random、server.random、pre-master-secret,三种公共生成session key（对称密钥）
  
  9)、后续通过对称密钥 session key 进行加密传输。

13、







1、事务的定义：执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。

2、四大特性(原子性，隔离性，持久性，最后都是为了实现一致性)

  1)、原子性(atomicity): 对数据库的一系列的操作，要么都是成功，要么都是失败，不可能出现部分成功或者部分失败的情况。以转账的场景为例，一个账户的余额减少，对应一个账户的增加，这两个一定是同时成功或者同时失败的。
  
  2)、一致性(consistent): 数据库的完整性约束没有被破坏，事务执行的前后都是合法的数据状态。比如主键必须是唯一的，字段长度符合要求
  
  3)、隔离性(isolation): 在数据库里面会有很多的事务同时去操作我们的同一张表或者同一行数据，必然会产生一些并发或者干扰的操作，那么我们对隔离性的定义，就是这些很多个的事务，对表或者行的并发操作，应该是透明的，互相不干扰的。通过这种方式，我们最终也是保证业务数据的一致性。
  
  4)、持久性(durable): 我们对数据库的任意的操作，增删改，只要事务提交成功，那么结果就是永久性的，不可能因为我们系统宕机或者重启了数据库的服务器，它又恢复到原来的状态了。这个就是事务的持久性。
  
3、MySQL中如何开启事务：【show variables like 'autocommit';】

  1)、【set session autocommit = on/off;】 -- 设定事务是否自动开启
  
  2)、【begin / start transaction】 -- 手工方式
  
  3)、【commit / rollback】 -- 事务提交或回滚
  
4、事务并发的三大问题

  1)、脏读：读取到其他事务未提交的数据的情况
  
  2)、不可重复读：一个事务读取到了其他事务已提交的update/delete操作的数据导致前后两次读取数据不一致的情况
  
  3)、幻读：一个事务读取到了其他事务已提交的insert操作的数据导致前后两次读取数据不一致的情况 --》insert操作
  
5、隔离级别

  1)、Read Uncommitted(未提交读)：一个事务可以读取到其他事务未提交的数据，会出现脏读，所以叫做 RU，它没有解决任何的问题
  
  2)、Read Committed(已提交读)：一个事务只能读取到其他事务已提交的数据，不能读取到其他事务未提交的数据，它解决了脏读的问题，但是会出现不可重复读的问题
  
  3)、Repeatable Read (可重复读)：解决了不可重复读的问题，但没有解决幻读的问题
  
  4)、Serializable(串行化)：所有的事务都是串行执行的，也就是对数据的操作需要排队，已经不存在事务的并发操作了，解决了所有的问题,但效率低(并发需要排队)。
  
  注意：隔离级别越高，事务的并发度就越低。唯一的区别就在于，InnoDB 在 RR 的级别就解决了幻读的问题。这个也是InnoDB 默认使用 RR 作为事务隔离级别的原因，既保证了数据的一致性，又支持较高的并发度。
  
  
  


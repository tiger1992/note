
====== InnoDB ======

1、.ibd(索引和数据文件)

2、.frm(表结构定义的文件)

3、日志文件组

4、在 InnoDB 的主键索引的叶子节点上，它直接存储了我们的数据

5、InnoDB 中，主键索引和辅助索引是有一个主次之分的，辅助索引存储的是辅助索引和主键值。如果使用辅助索引查询，会根据主键值在主
键索引中查询，最终取得数据。


====== MyISAM ======

1、.myd(数据文件)

2、.myi(索引文件)

3、.frm(表结构定义文件)

4、日志文件组

5、MyISAM 的 B+Tree 里面，叶子节点存储的是数据文件对应的磁盘地址。所以从索引文件.MYI 中找到键值后，会到数据文件.MYD 中获取相应的数据记录


====== 笔记 ======

1、.frm 是 MySQL 里面表结构定义的文件，不管你建表的时候选用任何一个存储引擎都会生成

2、删除索引：【ALTER TABLE test DROP INDEX test_age;】

3、建立索引：【ALTER TABLE test ADD INDEX test_age (age); 】
   联合索引：【ALTER TABLE test ADD INDEX test_age_name (age,name); 】age 是有序的，name 是无序的。当 age 相等的时候，name 才是有序的。
   1)、联合索引最左匹配，单列索引可以看成是特殊的联合索引
   2)、建立联合索引的时候，一定要把最常用的列放在最左边

4、查看所有建立的索引：【show indexes from test;】

5、查看表上的索引，Cardinality [kɑ:dɪ'nælɪtɪ] 代表基数，代表预估的不重复的值的数量。索引的基数与表总行数越接近，列的离散度就越高。在离散度高的列上建立的索引才有意义。

6、建立索引，要使用离散度（选择度）更高的字段

7、如果我们创建三个字段的索引 index(a,b,c)，相当于创建三个索引
  index(a)
  index(a,b)
  index(a,b,c)
  用 where b=? 和 where b=? and c=? 和 where a=? and c=?是不能使用到索引的。不能不用第一个字段，不能中断。
  
  
====== 索引下推 ======

1、索引条件下推（Index Condition Pushdown），5.6 以后完善的功能。只适用于二级索引。ICP 的目标是减少访问表的完整行的读数量从而减少 I/O 操作。
  关闭ICP ：【set optimizer_switch='index_condition_pushdown=off';】
  查看参数：【show variables like 'optimizer_switch';】

2、索引的比较是在存储引擎进行的，数据记录的比较，是在 Server 层进行的

3、Using Where 代表从存储引擎取回的数据不全部满足条件，需要在 Server 层过滤


====== 覆盖索引 ======

1、回表：非主键索引(辅助索引)，我们先通过索引找到主键索引的键值，再通过主键值查出索引里面没有的数据，它比基于主键索引的查询多扫描了一棵索引树，这个过程就叫回表。

2、辅助索引，不管是单列索引还是联合索引，如果 select 的数据列只用从索引中就能够取得，不必从数据区中读取，这时候使用的索引就叫做覆盖索引，这样就避免了回表。

3、执行计划中的 Extra 里面值为“Using index”代表使用了覆盖索引。

4、很明显，因为覆盖索引减少了 IO 次数，减少了数据的访问量，可以大大地提升查询效率。


====== 索引分类 ======

1、聚集索引：索引键值的逻辑顺序跟表数据行的物理存储顺序是一致的

2、辅助索引(非聚集索引)

3、前缀索引
  1)、当字段值比较长的时候，建立索引会消耗很多的空间，搜索起来也会很慢。我们可以通过截取字段的前面一部分内容建立索引，这个就叫前缀索引。创建一张商户表，因为地址字段比较长，在地址字段上建立前缀索引：
  create table shop(address varchar(120) not null);
  alter table shop add key (address(12));
  2)、截取多少呢？截取得多了，达不到节省索引存储空间的目的，截取得少了，重复内容太多，字段的散列度（选择性）会降低。怎么计算不同的长度的选择性呢？
  先看一下字段在全部数据中的选择度：
  select count(distinct address) / count(*) from shop;
  通过不同长度去计算，与全表的选择性对比：
  select count(distinct left(address,10))/count(*) as sub10,
         count(distinct left(address,11))/count(*) as sub11,
         count(distinct left(address,12))/count(*) as sub12,
         count(distinct left(address,13))/count(*) as sub13
  from shop;
  要截取前 13 个字段，就已经有比较高的选择性了（这里的数据只是举例）

====== 列的离散度 ======

1、离散度公式：【count(distinct(column_name)):count(*)】 --》 【列的全部不同值 : 所有数据行】
数据行数相同的情况下，分子越大，列的离散度就越高，简单来说，如果列的重复值越多，离散度就越低，重复值越少，离散度就越高。



  
  
 
  
  
  
  
  
  
  
  
  
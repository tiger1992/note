
====== 原则 ======

1、在用于 where 判断 order 排序和 join 的（on）字段上创建索引

2、索引的个数不要过多 --》 浪费空间，更新变慢

3、区分度低的字段，例如性别，不要建索引 --》离散度太低，导致扫描行数过多

4、频繁更新的值，不要作为主键或者索引 --》 页分裂

5、组合索引把散列性高（区分度高）的值放在前面

6、创建复合索引，而不是修改单列索引

7、过长的字段，怎么建立索引？

8、为什么不建议用无序的值（例如身份证、UUID ）作为索引？ 
  有序的索引，在插入数据时不需要移动已有数据，而无序索引每次插入都是插在现有索引的中间某个位置，效率慢。


====== 什么时候 用不到 索引 ？ ======

1、索引列上使用函数（replace\SUBSTR\CONCAT\sum count avg）、表达式、计算（+ - * /）：
   explain SELECT * FROM `t2` where id+1 = 4;
   
2、字符串不加引号，出现隐式转换

3、like 条件中前面带% ，过滤的开销太大，所以无法使用索引。这个时候可以用全文索引。

4、负向查询
  1)、NOT LIKE 不能：
  2)、!= （<>）和 NOT IN 在某些情况下可以：
  
  注意一个 SQL 语句是否使用索引，跟数据库版本、数据量、数据选择度都有关系。
  其实，用不用索引，最终都是优化器说了算。
  优化器是基于什么的优化器？
  基于 cost 开销（Cost Base Optimizer），它不是基于规则（Rule-Based Optimizer）， 也不是基于语义。怎么样开销小就怎么来。

====== 为什么要使用mysql存储过程？======
 
我们都知道应用程序分为两种，一种是基于web，一种是基于桌面，他们都和数据库进行交互来完成数据的存取工作。假设现在有一种应用程序包含了这两种，现在要修改其中的一个查询sql语句，那么我们可能要同时修改他们中对应的查询sql语句，当我们的应用程序很庞大很复杂的时候问题就出现这，不易维护！另外把sql查询语句放在我们的web程序或桌面中很容易遭到sql注入的破坏。而存储例程正好可以帮我们解决这些问题。存储过程(storedprocedure)、存储例程(store routine)、存储函数区别 
Mysql存储例程实际包含了存储过程和存储函数，它们被统称为存储例程。 
其中存储过程主要完成在获取记录或插入记录或更新记录或删除记录，即完成select insert delete update等的工作。而存储函数只完成查询的工作，可接受输入参数并返回一个结果。


====== 基本认知 ======
1、概念：StoredProcedure是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。存储过程是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。
存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用。

2、优点
存储过程可封装，并隐藏复杂的商业逻辑。
存储过程可以回传值，并可以接受参数。
存储过程无法使用 SELECT 指令来运行，因为它是子程序，与查看表，数据表或用户定义函数不同。
存储过程可以用在数据检验，强制实行商业逻辑等。

3、缺点
  1)、存储过程，往往定制化于特定的数据库上，因为支持的编程语言不同。当切换到其他厂商的数据库系统时，需要重写原有的存储过程。
  2)、不好管理，把过多业务逻辑写在存储过程不好维护，不利于分层管理，容易混乱，一般存储过程适用于个别对性能要求较高的业务，其它的必要性不是很大；

4、存储过程的创建和调用
存储过程就是具有名字的一段代码，用来完成一个特定的功能。
创建的存储过程保存在数据库的数据字典中。


====== MYSQL 存储过程中的关键语法 ======

1、声明语句结束符，可以自定义:【DELIMITER ;;】 或 【DELIMITER //】或 【DELIMITER $$】等等

2、声明存储过程:【CREATE PROCEDURE demo_in_parameter(IN p_in int)】

3、存储过程开始和结束符号:【BEGIN .... END】

4、变量定义:【DECLARE l_int int unsigned default 4000000;】

5、变量赋值:【SET @p_in=1】

6、创建mysql存储过程、存储函数:【create procedure 存储过程名(参数)】

7、存储过程体:【create function 存储函数名(参数)】

8、


====== 案例 ======
1、
## 销毁这个存储过程
DROP PROCEDURE IF EXISTS `emp`;
## 创建存储过程
CREATE PROCEDURE emp (IN id INT)
BEGIN
	SELECT * FROM employee WHERE dep_id = id;
END;

## 调用存储过程
call emp(1);

2、
DROP PROCEDURE IF EXISTS `proc_case`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_case`(IN type int)
BEGIN
    DECLARE c varchar(500);
    CASE type
    WHEN 0 THEN
        set c = 'param is 0';
    WHEN 1 THEN
        set c = 'param is 1';
    ELSE
        set c = 'param is others, not 0 or 1';
    END CASE;
    select c;
END;;
DELIMITER ;

## 调用
set @type=1;
call proc_case(@type);

3、
DROP PROCEDURE IF EXISTS `proc_count`;
DELIMITER //
CREATE PROCEDURE proc_count(OUT param1 INT)
BEGIN
	SELECT COUNT(*) INTO  param1 FROM user;
END//
DELIMITER ;
call proc_count();







3、退回上一个版本：git reset --hard HEAD^[git reset --hard commit_id] 上一个版本HEAD^，上上一个版本HEAD^^，往上100个版本HEAD~100

4、查看文件内容：cat filename

5、把暂存区的修改撤销掉:git reset HEAD filename

6、无论工作区是修改还是删除，都可以“一键还原”：git checkout -- filename

7、从版本库中删除文件：git rm filename  git commit -m "提交备忘录",git reset --hard commit_id
	
8、误删：rm filename  ,git checkout -- filename

9、跳过使用暂存区域：git commit -a -m "提交备忘录"

10、删除 log/ 目录下扩展名为 .log 的所有文件：$ git rm log/\*.log

11、删除以 ~ 结尾的所有文件：$ git rm \*~

12、添加文件到暂缓区：git add filename

13、--stat 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 

14、format，可以定制要显示的记录格式：$ git log --pretty=format:"%h - %an, %ar : %s"

    %H：提交对象（commit）的完整哈希字串

    %h：提交对象的简短哈希字串

    %T：树对象（tree）的完整哈希字串

    %t：树对象的简短哈希字串

    %P：父对象（parent）的完整哈希字串

    %p：父对象的简短哈希字串

    %an：作者（author）的名字

    %ae：作者的电子邮件地址

    %ad：作者修订日期（可以用 --date= 选项定制格式）

    %ar：作者修订日期，按多久以前的方式显示

    %cn：提交者（committer）的名字

    %ce：提交者的电子邮件地址

    %cd：提交日期

    %cr：提交日期，按多久以前的方式显示

    %s：提交说明

15、git log 命令支持的选项
    
    -p：按补丁格式显示每个更新之间的差异。

    --stat：显示每次更新的文件修改统计信息。

    --shortstat：只显示 --stat 中最后的行数修改添加移除统计。

    --name-only：仅在提交信息后显示已修改的文件清单。

    --name-status：显示新增、修改、删除的文件清单。

    --abbrev-commit：仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。

    --relative-date：使用较短的相对时间显示（比如，“2 weeks ago”）。

    --graph：显示 ASCII 图形表示的分支合并历史。

    --pretty：使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。

16、限制 git log 输出的选项 中列出了常用的选项

    -(n)：仅显示最近的 n 条提交

    --since, --after：仅显示指定时间之后的提交。可以在多种格式下工作 【"2008-01-15"】、 【"2 years 1 day 3 minutes ago"】

    --until, --before：仅显示指定时间之前的提交。

    --author：仅显示指定作者相关的提交。

    --committer：仅显示指定提交者相关的提交。

    --grep：仅显示含指定关键字的提交

    -S：仅显示添加或移除了某个关键字的提交

17、如果手动删除文件，则需要git rm filename 之后才可以提交成功。


